"""recreate_photo_schedules_table

Revision ID: 8f0988bc7020
Revises: 82b0c38e4e6b
Create Date: 2025-09-14 20:31:52.431605

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f0988bc7020'
down_revision: Union[str, None] = '82b0c38e4e6b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create photo_schedules table with correct schema
    op.create_table('photo_schedules',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('frequency_hours', sa.Integer(), nullable=False),
    sa.Column('next_capture_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_triggered_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('paused_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=False),
    sa.Column('silent_mode_enabled', sa.Boolean(), nullable=False),
    sa.Column('trigger_count', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name='photo_schedules_pkey')
    )
    op.create_index('ix_photo_schedules_user_id', 'photo_schedules', ['user_id'], unique=False)
    op.create_index('ix_photo_schedules_id', 'photo_schedules', ['id'], unique=False)
    
    # Update users table indexes
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_unique_constraint(None, 'users', ['uid'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop photo_schedules table
    op.drop_index('ix_photo_schedules_id', table_name='photo_schedules')
    op.drop_index('ix_photo_schedules_user_id', table_name='photo_schedules')
    op.drop_table('photo_schedules')
    
    # Revert users table changes
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.create_table('user_capture_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('collection_frequency_seconds', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notifications_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('silent_mode_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('device_tokens', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_capture_settings_pkey')
    )
    op.create_index('ix_user_capture_settings_user_id', 'user_capture_settings', ['user_id'], unique=False)
    op.create_index('ix_user_capture_settings_id', 'user_capture_settings', ['id'], unique=False)
    op.create_table('access_audit',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('api_client_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['api_client_id'], ['api_clients.id'], name='access_audit_api_client_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='access_audit_pkey')
    )
    op.create_index('idx_access_audit_created_at', 'access_audit', ['created_at'], unique=False)
    op.create_table('earning_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount_cents', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], name='earning_events_photo_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='earning_events_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='earning_events_pkey')
    )
    op.create_table('earning_balances',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('balance_cents', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='earning_balances_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name='earning_balances_pkey')
    )
    op.create_table('photo_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('frequency_seconds', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('next_capture_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_triggered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('paused_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notifications_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('silent_mode_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('trigger_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='photo_schedules_pkey')
    )
    op.create_index('ix_photo_schedules_user_id', 'photo_schedules', ['user_id'], unique=False)
    op.create_index('ix_photo_schedules_id', 'photo_schedules', ['id'], unique=False)
    op.create_table('api_clients',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('scopes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='api_clients_pkey')
    )
    op.create_table('photos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_key', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('normalized_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('captured_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sha256', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('face_valid', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('face_match', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('consent_version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('monetizable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='photos_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='photos_pkey')
    )
    op.create_index('idx_photos_user_id', 'photos', ['user_id'], unique=False)
    op.create_index('idx_photos_user_created', 'photos', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_photos_originalkey_version', 'photos', ['original_key', 'version_id'], unique=False)
    op.create_index('idx_photos_filename', 'photos', ['filename'], unique=False)
    op.create_index('idx_photos_created_at', 'photos', ['created_at'], unique=False)
    op.create_table('capture_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('triggered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('photo_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('earnings_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='capture_sessions_pkey')
    )
    op.create_index('ix_capture_sessions_user_id', 'capture_sessions', ['user_id'], unique=False)
    op.create_index('ix_capture_sessions_id', 'capture_sessions', ['id'], unique=False)
    op.create_table('user_consent',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_consent_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'version', name='user_consent_pkey')
    )
    # ### end Alembic commands ###
