version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: source_ai_postgres
    environment:
      POSTGRES_DB: source_ai_mvp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d source_ai_mvp"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - source_ai_network

  # Users Service
  users_service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    container_name: source_ai_users_service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/source_ai_mvp
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/users:/app
    networks:
      - source_ai_network
    restart: unless-stopped

  # Photos Service
  photos_service:
    build:
      context: ./services/photos
      dockerfile: Dockerfile
    container_name: source_ai_photos_service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/source_ai_mvp
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/photos:/app
      - photos_uploads:/app/uploads
    networks:
      - source_ai_network
    restart: unless-stopped

    # Scheduler Service
  scheduler_service:
    build:
      context: ./services/scheduler
      dockerfile: Dockerfile
    container_name: source_ai_scheduler_service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/source_ai_mvp
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/scheduler:/app
    networks:
      - source_ai_network
    restart: unless-stopped

  # Redis (for caching and sessions - optional)
  redis:
    image: redis:7-alpine
    container_name: source_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - source_ai_network
    restart: unless-stopped

  # Nginx (reverse proxy - optional)
  nginx:
    image: nginx:alpine
    container_name: source_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - photos_uploads:/usr/share/nginx/html/uploads:ro
    depends_on:
      - users_service
      - photos_service
    networks:
      - source_ai_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  photos_uploads:

networks:
  source_ai_network:
    driver: bridge
